   1               		.file	"Descriptors.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               	.global	CALLBACK_USB_GetDescriptor
  13               	CALLBACK_USB_GetDescriptor:
  14               	.LFB29:
  15               		.file 1 "Descriptors.c"
   1:Descriptors.c **** /*
   2:Descriptors.c ****              LUFA Library
   3:Descriptors.c ****      Copyright (C) Dean Camera, 2011.
   4:Descriptors.c **** 
   5:Descriptors.c ****   dean [at] fourwalledcubicle [dot] com
   6:Descriptors.c ****            www.lufa-lib.org
   7:Descriptors.c **** */
   8:Descriptors.c **** 
   9:Descriptors.c **** /*
  10:Descriptors.c ****   Copyright 2010  OBinou (obconseil [at] gmail [dot] com)
  11:Descriptors.c ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  12:Descriptors.c **** 
  13:Descriptors.c ****   Permission to use, copy, modify, distribute, and sell this
  14:Descriptors.c ****   software and its documentation for any purpose is hereby granted
  15:Descriptors.c ****   without fee, provided that the above copyright notice appear in
  16:Descriptors.c ****   all copies and that both that the copyright notice and this
  17:Descriptors.c ****   permission notice and warranty disclaimer appear in supporting
  18:Descriptors.c ****   documentation, and that the name of the author not be used in
  19:Descriptors.c ****   advertising or publicity pertaining to distribution of the
  20:Descriptors.c ****   software without specific, written prior permission.
  21:Descriptors.c **** 
  22:Descriptors.c ****   The author disclaim all warranties with regard to this
  23:Descriptors.c ****   software, including all implied warranties of merchantability
  24:Descriptors.c ****   and fitness.  In no event shall the author be liable for any
  25:Descriptors.c ****   special, indirect or consequential damages or any damages
  26:Descriptors.c ****   whatsoever resulting from loss of use, data or profits, whether
  27:Descriptors.c ****   in an action of contract, negligence or other tortious action,
  28:Descriptors.c ****   arising out of or in connection with the use or performance of
  29:Descriptors.c ****   this software.
  30:Descriptors.c **** */
  31:Descriptors.c **** 
  32:Descriptors.c **** /** \file
  33:Descriptors.c ****  *
  34:Descriptors.c ****  *  USB Device Descriptors, for library use when in USB device mode. Descriptors are special
  35:Descriptors.c ****  *  computer-readable structures which the host requests upon device enumeration, to determine
  36:Descriptors.c ****  *  the device's capabilities and functions.
  37:Descriptors.c ****  */
  38:Descriptors.c **** 
  39:Descriptors.c **** #include "Descriptors.h"
  40:Descriptors.c **** 
  41:Descriptors.c **** /** Device descriptor structure. This descriptor, located in FLASH memory, describes the overall
  42:Descriptors.c ****  *  device characteristics, including the supported USB version, control endpoint size and the
  43:Descriptors.c ****  *  number of device configurations. The descriptor is read out by the USB host when the enumeratio
  44:Descriptors.c ****  *  process begins.
  45:Descriptors.c ****  */
  46:Descriptors.c **** const USB_Descriptor_Device_t PROGMEM TakkTile_DeviceDescriptor =
  47:Descriptors.c **** {
  48:Descriptors.c **** 	.Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
  49:Descriptors.c **** 
  50:Descriptors.c **** 	.USBSpecification       = VERSION_BCD(01.10),
  51:Descriptors.c **** 	.Class                  = USB_CSCP_VendorSpecificClass,
  52:Descriptors.c **** 	.SubClass               = USB_CSCP_NoDeviceSubclass,
  53:Descriptors.c **** 	.Protocol               = USB_CSCP_NoDeviceProtocol,
  54:Descriptors.c **** 
  55:Descriptors.c **** 	.Endpoint0Size          = 64,
  56:Descriptors.c **** 	.VendorID               = 0x59E3,
  57:Descriptors.c **** 	.ProductID              = 0x74C7,
  58:Descriptors.c **** 	.ReleaseNumber          = VERSION_BCD(02.00),
  59:Descriptors.c **** 
  60:Descriptors.c **** 	.ManufacturerStrIndex   = 0x01,
  61:Descriptors.c **** 	.ProductStrIndex        = 0x02,
  62:Descriptors.c **** 	.SerialNumStrIndex      = USE_INTERNAL_SERIAL,
  63:Descriptors.c **** 
  64:Descriptors.c **** 	.NumberOfConfigurations = 1
  65:Descriptors.c **** };
  66:Descriptors.c **** 
  67:Descriptors.c **** /** Configuration descriptor structure. This descriptor, located in FLASH memory, describes the usa
  68:Descriptors.c ****  *  of the device in one of its supported configurations, including information about any device in
  69:Descriptors.c ****  *  and endpoints. The descriptor is read out by the USB host during the enumeration process when s
  70:Descriptors.c ****  *  a configuration so that the host may correctly communicate with the USB device.
  71:Descriptors.c ****  */
  72:Descriptors.c **** const USB_Descriptor_Configuration_t PROGMEM TakkTile_ConfigurationDescriptor =
  73:Descriptors.c **** {
  74:Descriptors.c **** 	.Config =
  75:Descriptors.c **** 		{
  76:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type = DTYPE_
  77:Descriptors.c **** 
  78:Descriptors.c **** 			.TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
  79:Descriptors.c **** 			.TotalInterfaces        = 1,
  80:Descriptors.c **** 
  81:Descriptors.c **** 			.ConfigurationNumber    = 1,
  82:Descriptors.c **** 			.ConfigurationStrIndex  = NO_DESCRIPTOR,
  83:Descriptors.c **** 
  84:Descriptors.c **** 			.ConfigAttributes       = USB_CONFIG_ATTR_BUSPOWERED,
  85:Descriptors.c **** 
  86:Descriptors.c **** 			.MaxPowerConsumption    = USB_CONFIG_POWER_MA(500)
  87:Descriptors.c **** 		},
  88:Descriptors.c **** 
  89:Descriptors.c **** 	.TakkTileInterface =
  90:Descriptors.c **** 		{
  91:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
  92:Descriptors.c **** 
  93:Descriptors.c **** 			.InterfaceNumber        = 0,
  94:Descriptors.c **** 			.AlternateSetting       = 0,
  95:Descriptors.c **** 
  96:Descriptors.c **** 			.TotalEndpoints         = 2,
  97:Descriptors.c **** 
  98:Descriptors.c **** 			.Class                  = USB_CSCP_VendorSpecificClass,
  99:Descriptors.c **** 			.SubClass               = 0x00,
 100:Descriptors.c **** 			.Protocol               = 0x00,
 101:Descriptors.c **** 
 102:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 103:Descriptors.c **** 		},
 104:Descriptors.c **** 	.TakkTileInEndpoint =
 105:Descriptors.c **** 		{
 106:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 107:Descriptors.c **** 
 108:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_IN | 1),
 109:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 110:Descriptors.c **** 			.EndpointSize           = 64,
 111:Descriptors.c **** 			.PollingIntervalMS      = 0x00
 112:Descriptors.c **** 		},
 113:Descriptors.c **** 	.TakkTileOutEndpoint =
 114:Descriptors.c **** 		{
 115:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 116:Descriptors.c **** 
 117:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_OUT | 2),
 118:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 119:Descriptors.c **** 			.EndpointSize           = 32,
 120:Descriptors.c **** 			.PollingIntervalMS      = 0x00
 121:Descriptors.c **** 		},
 122:Descriptors.c **** };
 123:Descriptors.c **** 
 124:Descriptors.c **** /** Language descriptor structure. This descriptor, located in FLASH memory, is returned when the h
 125:Descriptors.c ****  *  the string descriptor with index 0 (the first index). It is actually an array of 16-bit integer
 126:Descriptors.c ****  *  via the language ID table available at USB.org what languages the device supports for its strin
 127:Descriptors.c ****  */
 128:Descriptors.c **** const USB_Descriptor_String_t PROGMEM TakkTile_LanguageString =
 129:Descriptors.c **** {
 130:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 131:Descriptors.c **** 
 132:Descriptors.c **** 	.UnicodeString          = {LANGUAGE_ID_ENG}
 133:Descriptors.c **** };
 134:Descriptors.c **** 
 135:Descriptors.c **** /** Manufacturer descriptor string. This is a Unicode string containing the manufacturer's details 
 136:Descriptors.c ****  *  form, and is read out upon request by the host when the appropriate string ID is requested, lis
 137:Descriptors.c ****  *  Descriptor.
 138:Descriptors.c ****  */
 139:Descriptors.c **** const USB_Descriptor_String_t PROGMEM TakkTile_ManufacturerString =
 140:Descriptors.c **** {
 141:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(20), .Type = DTYPE_String},
 142:Descriptors.c **** 
 143:Descriptors.c **** 	.UnicodeString          = L"The Biorobotics Lab"
 144:Descriptors.c **** };
 145:Descriptors.c **** 
 146:Descriptors.c **** /** Product descriptor string. This is a Unicode string containing the product's details in human r
 147:Descriptors.c ****  *  and is read out upon request by the host when the appropriate string ID is requested, listed in
 148:Descriptors.c ****  *  Descriptor.
 149:Descriptors.c ****  */
 150:Descriptors.c **** const USB_Descriptor_String_t PROGMEM TakkTile_ProductString =
 151:Descriptors.c **** {
 152:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(8), .Type = DTYPE_String},
 153:Descriptors.c **** 
 154:Descriptors.c **** 	.UnicodeString          = L"TakkTile"
 155:Descriptors.c **** };
 156:Descriptors.c **** 
 157:Descriptors.c **** 
 158:Descriptors.c **** /** This function is called by the library when in device mode, and must be overridden (see library
 159:Descriptors.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 160:Descriptors.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 161:Descriptors.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 162:Descriptors.c ****  *  USB host.
 163:Descriptors.c ****  */
 164:Descriptors.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 165:Descriptors.c ****                                     const uint8_t wIndex,
 166:Descriptors.c ****                                     const void** const DescriptorAddress)
 167:Descriptors.c **** {
  16               		.loc 1 167 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 168:Descriptors.c **** 	const uint8_t  DescriptorType   = (wValue >> 8);
 169:Descriptors.c **** 	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 170:Descriptors.c **** 
 171:Descriptors.c **** 	const void* Address = NULL;
 172:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
 173:Descriptors.c **** 
 174:Descriptors.c **** 	switch (DescriptorType)
 175:Descriptors.c **** 	{
 176:Descriptors.c **** 		case DTYPE_Device:
 177:Descriptors.c **** 			Address = &TakkTile_DeviceDescriptor;
 178:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
 179:Descriptors.c **** 			break;
 180:Descriptors.c **** 		case DTYPE_Configuration:
 181:Descriptors.c **** 			Address = &TakkTile_ConfigurationDescriptor;
 182:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
 183:Descriptors.c **** 			break;
 184:Descriptors.c **** 		case DTYPE_String:
 185:Descriptors.c **** 			switch (DescriptorNumber)
 186:Descriptors.c **** 			{
 187:Descriptors.c **** 				case 0x00:
 188:Descriptors.c **** 					Address = &TakkTile_LanguageString;
 189:Descriptors.c **** 					Size    = pgm_read_byte(&TakkTile_LanguageString.Header.Size);
 190:Descriptors.c **** 					break;
 191:Descriptors.c **** 				case 0x01:
 192:Descriptors.c **** 					Address = &TakkTile_ManufacturerString;
 193:Descriptors.c **** 					Size    = pgm_read_byte(&TakkTile_ManufacturerString.Header.Size);
 194:Descriptors.c **** 					break;
 195:Descriptors.c **** 				case 0x02:
 196:Descriptors.c **** 					Address = &TakkTile_ProductString;
 197:Descriptors.c **** 					Size    = pgm_read_byte(&TakkTile_ProductString.Header.Size);
 198:Descriptors.c **** 					break;
 199:Descriptors.c **** 			}
 200:Descriptors.c **** 
 201:Descriptors.c **** 			break;
 202:Descriptors.c **** 	}
 203:Descriptors.c **** 
 204:Descriptors.c **** 	*DescriptorAddress = Address;
 205:Descriptors.c **** 	return Size;
 206:Descriptors.c **** }
  23               		.loc 1 206 0
  24 0000 292F      		mov r18,r25
  25 0002 3327      		clr r19
 174:Descriptors.c **** 	switch (DescriptorType)
  26               		.loc 1 174 0
  27 0004 2230      		cpi r18,2
  28 0006 3105      		cpc r19,__zero_reg__
  29 0008 01F0      		breq .L4
  30 000a 2330      		cpi r18,3
  31 000c 3105      		cpc r19,__zero_reg__
  32 000e 01F0      		breq .L5
  33 0010 2130      		cpi r18,1
  34 0012 3105      		cpc r19,__zero_reg__
  35 0014 01F0      		breq .L9
  36               	.LVL1:
  37               	.L11:
 172:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
  38               		.loc 1 172 0
  39 0016 20E0      		ldi r18,0
  40 0018 30E0      		ldi r19,0
 171:Descriptors.c **** 	const void* Address = NULL;
  41               		.loc 1 171 0
  42 001a 80E0      		ldi r24,0
  43 001c 90E0      		ldi r25,0
  44               	.LVL2:
  45               	.L3:
 204:Descriptors.c **** 	*DescriptorAddress = Address;
  46               		.loc 1 204 0
  47 001e FA01      		movw r30,r20
  48 0020 8083      		st Z,r24
  49 0022 9183      		std Z+1,r25
  50               		.loc 1 206 0
  51 0024 C901      		movw r24,r18
  52               	.LVL3:
  53 0026 0895      		ret
  54               	.LVL4:
  55               	.L9:
 178:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  56               		.loc 1 178 0
  57 0028 22E1      		ldi r18,lo8(18)
  58 002a 30E0      		ldi r19,0
 177:Descriptors.c **** 			Address = &TakkTile_DeviceDescriptor;
  59               		.loc 1 177 0
  60 002c 80E0      		ldi r24,lo8(TakkTile_DeviceDescriptor)
  61 002e 90E0      		ldi r25,hi8(TakkTile_DeviceDescriptor)
  62               	.LVL5:
 204:Descriptors.c **** 	*DescriptorAddress = Address;
  63               		.loc 1 204 0
  64 0030 FA01      		movw r30,r20
  65 0032 8083      		st Z,r24
  66 0034 9183      		std Z+1,r25
  67               		.loc 1 206 0
  68 0036 C901      		movw r24,r18
  69               	.LVL6:
  70 0038 0895      		ret
  71               	.LVL7:
  72               	.L5:
  73 003a 9927      		clr r25
  74               	.LVL8:
 185:Descriptors.c **** 			switch (DescriptorNumber)
  75               		.loc 1 185 0
  76 003c 8130      		cpi r24,1
  77 003e 9105      		cpc r25,__zero_reg__
  78 0040 01F0      		breq .L7
  79 0042 8230      		cpi r24,2
  80 0044 9105      		cpc r25,__zero_reg__
  81 0046 01F0      		breq .L8
  82 0048 892B      		or r24,r25
  83 004a 01F4      		brne .L11
  84               	.LVL9:
  85               	.LBB2:
 189:Descriptors.c **** 					Size    = pgm_read_byte(&TakkTile_LanguageString.Header.Size);
  86               		.loc 1 189 0
  87 004c E0E0      		ldi r30,lo8(TakkTile_LanguageString)
  88 004e F0E0      		ldi r31,hi8(TakkTile_LanguageString)
  89               	/* #APP */
  90               	 ;  189 "Descriptors.c" 1
  91 0050 2491      		lpm r18, Z
  92               		
  93               	 ;  0 "" 2
  94               	.LVL10:
  95               	/* #NOAPP */
  96               	.LBE2:
  97 0052 30E0      		ldi r19,0
  98               	.LVL11:
 188:Descriptors.c **** 					Address = &TakkTile_LanguageString;
  99               		.loc 1 188 0
 100 0054 CF01      		movw r24,r30
 190:Descriptors.c **** 					break;
 101               		.loc 1 190 0
 102 0056 00C0      		rjmp .L3
 103               	.LVL12:
 104               	.L4:
 182:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
 105               		.loc 1 182 0
 106 0058 20E2      		ldi r18,lo8(32)
 107 005a 30E0      		ldi r19,0
 181:Descriptors.c **** 			Address = &TakkTile_ConfigurationDescriptor;
 108               		.loc 1 181 0
 109 005c 80E0      		ldi r24,lo8(TakkTile_ConfigurationDescriptor)
 110 005e 90E0      		ldi r25,hi8(TakkTile_ConfigurationDescriptor)
 111               	.LVL13:
 204:Descriptors.c **** 	*DescriptorAddress = Address;
 112               		.loc 1 204 0
 113 0060 FA01      		movw r30,r20
 114 0062 8083      		st Z,r24
 115 0064 9183      		std Z+1,r25
 116               		.loc 1 206 0
 117 0066 C901      		movw r24,r18
 118               	.LVL14:
 119 0068 0895      		ret
 120               	.LVL15:
 121               	.L7:
 122               	.LBB3:
 193:Descriptors.c **** 					Size    = pgm_read_byte(&TakkTile_ManufacturerString.Header.Size);
 123               		.loc 1 193 0
 124 006a E0E0      		ldi r30,lo8(TakkTile_ManufacturerString)
 125 006c F0E0      		ldi r31,hi8(TakkTile_ManufacturerString)
 126               	/* #APP */
 127               	 ;  193 "Descriptors.c" 1
 128 006e 2491      		lpm r18, Z
 129               		
 130               	 ;  0 "" 2
 131               	.LVL16:
 132               	/* #NOAPP */
 133               	.LBE3:
 134 0070 30E0      		ldi r19,0
 135               	.LVL17:
 192:Descriptors.c **** 					Address = &TakkTile_ManufacturerString;
 136               		.loc 1 192 0
 137 0072 CF01      		movw r24,r30
 194:Descriptors.c **** 					break;
 138               		.loc 1 194 0
 139 0074 00C0      		rjmp .L3
 140               	.LVL18:
 141               	.L8:
 142               	.LBB4:
 197:Descriptors.c **** 					Size    = pgm_read_byte(&TakkTile_ProductString.Header.Size);
 143               		.loc 1 197 0
 144 0076 E0E0      		ldi r30,lo8(TakkTile_ProductString)
 145 0078 F0E0      		ldi r31,hi8(TakkTile_ProductString)
 146               	/* #APP */
 147               	 ;  197 "Descriptors.c" 1
 148 007a 2491      		lpm r18, Z
 149               		
 150               	 ;  0 "" 2
 151               	.LVL19:
 152               	/* #NOAPP */
 153               	.LBE4:
 154 007c 30E0      		ldi r19,0
 155               	.LVL20:
 196:Descriptors.c **** 					Address = &TakkTile_ProductString;
 156               		.loc 1 196 0
 157 007e CF01      		movw r24,r30
 198:Descriptors.c **** 					break;
 158               		.loc 1 198 0
 159 0080 00C0      		rjmp .L3
 160               		.cfi_endproc
 161               	.LFE29:
 163               	.global	TakkTile_ProductString
 164               		.section	.progmem.data,"a",@progbits
 167               	TakkTile_ProductString:
 168 0000 12        		.byte	18
 169 0001 03        		.byte	3
 170 0002 5400      		.string	"T"
 171 0004 6100      		.string	"a"
 172 0006 6B00      		.string	"k"
 173 0008 6B00      		.string	"k"
 174 000a 5400      		.string	"T"
 175 000c 6900      		.string	"i"
 176 000e 6C00      		.string	"l"
 177 0010 6500      		.string	"e"
 178 0012 00        		.string	""
 179 0013 00        		.string	""
 180               	.global	TakkTile_ManufacturerString
 183               	TakkTile_ManufacturerString:
 184 0014 2A        		.byte	42
 185 0015 03        		.byte	3
 186 0016 5400      		.string	"T"
 187 0018 6800      		.string	"h"
 188 001a 6500      		.string	"e"
 189 001c 2000      		.string	" "
 190 001e 4200      		.string	"B"
 191 0020 6900      		.string	"i"
 192 0022 6F00      		.string	"o"
 193 0024 7200      		.string	"r"
 194 0026 6F00      		.string	"o"
 195 0028 6200      		.string	"b"
 196 002a 6F00      		.string	"o"
 197 002c 7400      		.string	"t"
 198 002e 6900      		.string	"i"
 199 0030 6300      		.string	"c"
 200 0032 7300      		.string	"s"
 201 0034 2000      		.string	" "
 202 0036 4C00      		.string	"L"
 203 0038 6100      		.string	"a"
 204 003a 6200      		.string	"b"
 205 003c 00        		.string	""
 206 003d 00        		.string	""
 207               	.global	TakkTile_LanguageString
 210               	TakkTile_LanguageString:
 211 003e 04        		.byte	4
 212 003f 03        		.byte	3
 213 0040 0904      		.word	1033
 214               	.global	TakkTile_ConfigurationDescriptor
 217               	TakkTile_ConfigurationDescriptor:
 218 0042 09        		.byte	9
 219 0043 02        		.byte	2
 220 0044 2000      		.word	32
 221 0046 01        		.byte	1
 222 0047 01        		.byte	1
 223 0048 00        		.byte	0
 224 0049 80        		.byte	-128
 225 004a FA        		.byte	-6
 226 004b 09        		.byte	9
 227 004c 04        		.byte	4
 228 004d 00        		.byte	0
 229 004e 00        		.byte	0
 230 004f 02        		.byte	2
 231 0050 FF        		.byte	-1
 232 0051 00        		.byte	0
 233 0052 00        		.byte	0
 234 0053 00        		.byte	0
 235 0054 07        		.byte	7
 236 0055 05        		.byte	5
 237 0056 81        		.byte	-127
 238 0057 02        		.byte	2
 239 0058 4000      		.word	64
 240 005a 00        		.byte	0
 241 005b 07        		.byte	7
 242 005c 05        		.byte	5
 243 005d 02        		.byte	2
 244 005e 02        		.byte	2
 245 005f 2000      		.word	32
 246 0061 00        		.byte	0
 247               	.global	TakkTile_DeviceDescriptor
 250               	TakkTile_DeviceDescriptor:
 251 0062 12        		.byte	18
 252 0063 01        		.byte	1
 253 0064 1001      		.word	272
 254 0066 FF        		.byte	-1
 255 0067 00        		.byte	0
 256 0068 00        		.byte	0
 257 0069 40        		.byte	64
 258 006a E359      		.word	23011
 259 006c C774      		.word	29895
 260 006e 0002      		.word	512
 261 0070 01        		.byte	1
 262 0071 02        		.byte	2
 263 0072 DC        		.byte	-36
 264 0073 01        		.byte	1
 265               		.text
 266               	.Letext0:
 267               		.file 2 "/usr/local/avr8-gnu-toolchain-linux_x86/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/
 268               		.file 3 "/usr/local/avr8-gnu-toolchain-linux_x86/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/
 269               		.file 4 "/usr/local/avr8-gnu-toolchain-linux_x86/bin/../lib/gcc/avr/4.7.2/include/stddef.h"
 270               		.file 5 "usb/StdDescriptors.h"
 271               		.file 6 "usb/usb.h"
 272               		.file 7 "Descriptors.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Descriptors.c
     /tmp/cca90zRS.s:2      *ABS*:0000003e __SP_H__
     /tmp/cca90zRS.s:3      *ABS*:0000003d __SP_L__
     /tmp/cca90zRS.s:4      *ABS*:0000003f __SREG__
     /tmp/cca90zRS.s:5      *ABS*:00000034 __CCP__
     /tmp/cca90zRS.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/cca90zRS.s:7      *ABS*:00000001 __zero_reg__
     /tmp/cca90zRS.s:13     .text:00000000 CALLBACK_USB_GetDescriptor
     /tmp/cca90zRS.s:250    .progmem.data:00000062 TakkTile_DeviceDescriptor
     /tmp/cca90zRS.s:210    .progmem.data:0000003e TakkTile_LanguageString
     /tmp/cca90zRS.s:217    .progmem.data:00000042 TakkTile_ConfigurationDescriptor
     /tmp/cca90zRS.s:183    .progmem.data:00000014 TakkTile_ManufacturerString
     /tmp/cca90zRS.s:167    .progmem.data:00000000 TakkTile_ProductString

NO UNDEFINED SYMBOLS
